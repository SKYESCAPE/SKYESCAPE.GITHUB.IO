I"O]<h1 id="前言">前言</h1>
<p>本文记录VHDL的数据对象和数据类型，与其他高级语言一样，VHDL程序也要遵循语言要素及语法规则。</p>

<h1 id="数据对象">数据对象</h1>
<p>数据对象(object)类似于存储单元，它接受不同数据类型的赋值。在VHDL中，数据对象有常数、信号、变量3类。(信号具有硬件特性)</p>

<h3 id="标识符">标识符</h3>
<p>首先是VHDL合法字符集：包括基本字符集(26个大小写英文字母、10个阿拉伯数字和下划线)和扩展字符集(图形符号与空格)</p>

<p>有了合法字符集，那么就有了标识符，VHDL的标识符可以使常数、变量、信号、端口、子程序、过程等的名称。VHDL标识符同样包括基本标识符和扩展标识符。标识符的设计同样要遵循有意义的原则(个人习惯或团队规定)，无意义的标识符也让别人难以阅读程序。</p>

<p>合法基本标识符设计规则：</p>
<ul>
  <li>必须由基本字符集组成</li>
  <li>必须由26个大小写英文字母开头</li>
  <li>下划线不能作为最后一个字符或出现两次以上</li>
  <li>VHDL的保留字不能作为一个基本标识符</li>
  <li>英文字母不区分大小写</li>
</ul>

<p>扩展标识符是两个反斜杠之间的字符组合，主要有以下情况：</p>
<ul>
  <li>基本标识符前后加上反斜杠</li>
  <li>允许包含基本字符集以外的其他字符和空格</li>
  <li>允许使用保留字</li>
  <li>允许阿拉伯数字开头</li>
  <li>允许两个或两个以上的下划线相连</li>
  <li>需要使用反斜杠时可用两个斜杠代替</li>
</ul>

<h3 id="保留字">保留字</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">关键字</th>
      <th style="text-align: center">意义</th>
      <th style="text-align: center">关键字</th>
      <th style="text-align: center">意义</th>
      <th style="text-align: center">关键字</th>
      <th style="text-align: center">意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">abs</td>
      <td style="text-align: center">绝对值</td>
      <td style="text-align: center">access</td>
      <td style="text-align: center">自定义类型存取</td>
      <td style="text-align: center">after</td>
      <td style="text-align: center">信号赋值语句表延迟</td>
    </tr>
    <tr>
      <td style="text-align: center">alias</td>
      <td style="text-align: center">别名</td>
      <td style="text-align: center">all</td>
      <td style="text-align: center">程序报说明语句表全部</td>
      <td style="text-align: center">and</td>
      <td style="text-align: center">与</td>
    </tr>
    <tr>
      <td style="text-align: center">architecture</td>
      <td style="text-align: center">结构体</td>
      <td style="text-align: center">array</td>
      <td style="text-align: center">数据型</td>
      <td style="text-align: center">assert</td>
      <td style="text-align: center">断言语句</td>
    </tr>
    <tr>
      <td style="text-align: center">attribute</td>
      <td style="text-align: center">属性</td>
      <td style="text-align: center">begin</td>
      <td style="text-align: center">结构体表开始</td>
      <td style="text-align: center">block</td>
      <td style="text-align: center">块语句</td>
    </tr>
    <tr>
      <td style="text-align: center">body</td>
      <td style="text-align: center">包体</td>
      <td style="text-align: center">buffer</td>
      <td style="text-align: center">缓冲端口</td>
      <td style="text-align: center">bus</td>
      <td style="text-align: center">总线</td>
    </tr>
    <tr>
      <td style="text-align: center">case</td>
      <td style="text-align: center">循环语句</td>
      <td style="text-align: center">component</td>
      <td style="text-align: center">元件</td>
      <td style="text-align: center">configuration</td>
      <td style="text-align: center">配置</td>
    </tr>
    <tr>
      <td style="text-align: center">constant</td>
      <td style="text-align: center">常量</td>
      <td style="text-align: center">disconnect</td>
      <td style="text-align: center">无关联</td>
      <td style="text-align: center">downto</td>
      <td style="text-align: center">从左至右依次递减</td>
    </tr>
    <tr>
      <td style="text-align: center">else</td>
      <td style="text-align: center">其他的</td>
      <td style="text-align: center">elsif</td>
      <td style="text-align: center">其他的如果</td>
      <td style="text-align: center">end</td>
      <td style="text-align: center">结束</td>
    </tr>
    <tr>
      <td style="text-align: center">entity</td>
      <td style="text-align: center">实体说明</td>
      <td style="text-align: center">exit</td>
      <td style="text-align: center">结束本次循环开始下一次</td>
      <td style="text-align: center">file</td>
      <td style="text-align: center">文件</td>
    </tr>
    <tr>
      <td style="text-align: center">for</td>
      <td style="text-align: center">循环语句</td>
      <td style="text-align: center">function</td>
      <td style="text-align: center">函数</td>
      <td style="text-align: center">generate</td>
      <td style="text-align: center">生成语句</td>
    </tr>
    <tr>
      <td style="text-align: center">genric</td>
      <td style="text-align: center">类属性参数说明</td>
      <td style="text-align: center">guarded</td>
      <td style="text-align: center">块结构中选择项</td>
      <td style="text-align: center">if</td>
      <td style="text-align: center">条件语句</td>
    </tr>
    <tr>
      <td style="text-align: center">impure</td>
      <td style="text-align: center">不规范的</td>
      <td style="text-align: center">in</td>
      <td style="text-align: center">输入端口</td>
      <td style="text-align: center">inertial</td>
      <td style="text-align: center">固有</td>
    </tr>
    <tr>
      <td style="text-align: center">inout</td>
      <td style="text-align: center">双向端口</td>
      <td style="text-align: center">is</td>
      <td style="text-align: center">描述实体、结构体的关键字</td>
      <td style="text-align: center">label</td>
      <td style="text-align: center">标号</td>
    </tr>
    <tr>
      <td style="text-align: center">library</td>
      <td style="text-align: center">库</td>
      <td style="text-align: center">linkage</td>
      <td style="text-align: center">链接模式</td>
      <td style="text-align: center">literal</td>
      <td style="text-align: center">按字母顺序</td>
    </tr>
    <tr>
      <td style="text-align: center">loop</td>
      <td style="text-align: center">顺序表述语句</td>
      <td style="text-align: center">map</td>
      <td style="text-align: center">映射</td>
      <td style="text-align: center">mod</td>
      <td style="text-align: center">求模</td>
    </tr>
    <tr>
      <td style="text-align: center">nand</td>
      <td style="text-align: center">与非</td>
      <td style="text-align: center">new</td>
      <td style="text-align: center">新建</td>
      <td style="text-align: center">next</td>
      <td style="text-align: center">跳出本次循环</td>
    </tr>
    <tr>
      <td style="text-align: center">nor</td>
      <td style="text-align: center">或非</td>
      <td style="text-align: center">not</td>
      <td style="text-align: center">取反</td>
      <td style="text-align: center">null</td>
      <td style="text-align: center">空</td>
    </tr>
    <tr>
      <td style="text-align: center">of</td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">on</td>
      <td style="text-align: center">信号等待</td>
      <td style="text-align: center">open</td>
      <td style="text-align: center">打开</td>
    </tr>
    <tr>
      <td style="text-align: center">or</td>
      <td style="text-align: center">或</td>
      <td style="text-align: center">others</td>
      <td style="text-align: center">IF语句表其他</td>
      <td style="text-align: center">out</td>
      <td style="text-align: center">输出端口</td>
    </tr>
    <tr>
      <td style="text-align: center">package</td>
      <td style="text-align: center">程序包</td>
      <td style="text-align: center">port</td>
      <td style="text-align: center">端口说明</td>
      <td style="text-align: center">postponed</td>
      <td style="text-align: center">延迟</td>
    </tr>
    <tr>
      <td style="text-align: center">procedure</td>
      <td style="text-align: center">过程</td>
      <td style="text-align: center">process</td>
      <td style="text-align: center">进城</td>
      <td style="text-align: center">pure</td>
      <td style="text-align: center">纯的</td>
    </tr>
    <tr>
      <td style="text-align: center">range</td>
      <td style="text-align: center">属性项目取值区间测试</td>
      <td style="text-align: center">record</td>
      <td style="text-align: center">记录性</td>
      <td style="text-align: center">register</td>
      <td style="text-align: center">寄存器</td>
    </tr>
    <tr>
      <td style="text-align: center">reject</td>
      <td style="text-align: center">除去</td>
      <td style="text-align: center">rem</td>
      <td style="text-align: center">取余</td>
      <td style="text-align: center">return</td>
      <td style="text-align: center">返回</td>
    </tr>
    <tr>
      <td style="text-align: center">rol</td>
      <td style="text-align: center">逻辑循环左移</td>
      <td style="text-align: center">ror</td>
      <td style="text-align: center">逻辑循环右移</td>
      <td style="text-align: center">select</td>
      <td style="text-align: center">选择</td>
    </tr>
    <tr>
      <td style="text-align: center">severity</td>
      <td style="text-align: center">错误严重级别</td>
      <td style="text-align: center">signal</td>
      <td style="text-align: center">信号</td>
      <td style="text-align: center">shared</td>
      <td style="text-align: center">共享</td>
    </tr>
    <tr>
      <td style="text-align: center">sla</td>
      <td style="text-align: center">算术左移</td>
      <td style="text-align: center">sll</td>
      <td style="text-align: center">逻辑左移</td>
      <td style="text-align: center">sra</td>
      <td style="text-align: center">算术右移</td>
    </tr>
    <tr>
      <td style="text-align: center">subtype</td>
      <td style="text-align: center">子类型定义</td>
      <td style="text-align: center">then</td>
      <td style="text-align: center">于是</td>
      <td style="text-align: center">to</td>
      <td style="text-align: center">从左到右依次递增</td>
    </tr>
    <tr>
      <td style="text-align: center">transport</td>
      <td style="text-align: center">传送</td>
      <td style="text-align: center">type</td>
      <td style="text-align: center">类型定义</td>
      <td style="text-align: center">unaffected</td>
      <td style="text-align: center">不采取任何措施</td>
    </tr>
    <tr>
      <td style="text-align: center">units</td>
      <td style="text-align: center">基本单位</td>
      <td style="text-align: center">until</td>
      <td style="text-align: center">直到</td>
      <td style="text-align: center">use</td>
      <td style="text-align: center">使用</td>
    </tr>
    <tr>
      <td style="text-align: center">variable</td>
      <td style="text-align: center">变量</td>
      <td style="text-align: center">wait</td>
      <td style="text-align: center">wait语句</td>
      <td style="text-align: center">when</td>
      <td style="text-align: center">条件语句</td>
    </tr>
    <tr>
      <td style="text-align: center">while</td>
      <td style="text-align: center">循环语句</td>
      <td style="text-align: center">with</td>
      <td style="text-align: center">赋值语句选择开头</td>
      <td style="text-align: center">xnor</td>
      <td style="text-align: center">同或</td>
    </tr>
    <tr>
      <td style="text-align: center">xor</td>
      <td style="text-align: center">亦或</td>
      <td style="text-align: center">无</td>
      <td style="text-align: center">无</td>
      <td style="text-align: center">无</td>
      <td style="text-align: center">无</td>
    </tr>
  </tbody>
</table>

<h3 id="常量constant">常量(constant)</h3>
<p>常量是用来存储指定数据类型的数值。能够提高VHDL的可读性、安全性和易修改性。常量在程序包中被声明，则具有全局性；若在实体中被声明，则在实体的各结构体中有效；若在结构体中声明，仅在该结构体中有效；若在进程中被说明，则仅在该进程中有效。常量声明时需要指定相应的常量名、数据类型与初始值。其中数据类型可以使标量或复合类型，但不能是文件类型或存取类型。</p>

<p>常量的声明格式：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>constant 常量名 : 常量数据类型 := 初始值 ;  
</code></pre></div></div>

<h3 id="变量variable">变量(variable)</h3>
<p>变量同常量也是用来存储指定数据类型的数值，但与常量不同的是，变量可以通过<strong>赋值</strong>来改变变量的数值。变量的适用范围只能是进程、子程序和函数，且仅在其中是可见的。此外，变量的赋值是实时的，加上时间延时是非法的。(2002版VHDL支持共享变量，扩大了变量的适用范围，即可在进程、子程序和函数之外声明，也可在结构体或程序包中声明)，变量的赋值采用”:=”。</p>

<p>变量的声明格式：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>variable 变量名 :  数据类型 := 初始值 ;
</code></pre></div></div>

<h3 id="信号signal">信号(signal)</h3>
<p>信号是VHDL作为硬件描述语言的一个主要特征。信号类似元件内部的硬件连接线，描述了硬件内部之间的连线，也可以描述一种可以保留历史的数值寄存器。在VHDL中，信号是具有最多属性的数据对象。信号的声明可在程序包、实体和结构体中，但不能再进程、子程序和函数中声明。(信号在实体中声明与在结构体中声明的区别在于在实体中声明具有方向限制)，信号的赋值采用”&lt;=”。此外，信号可设置延时量，也可以作为模块间的信息载体。</p>

<p>信号的声明格式：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>signal 信号名 : 数据类型 := 初始值 ;
例：
temp &lt;= '1';
</code></pre></div></div>

<p>信号的属性：设signal为一信号，t为时间，则</p>
<ul>
  <li>signal’delayed(t)：信号延迟t时间。</li>
  <li>signal’stable(t)：若在t时间内信号没有发生变化为真，否则为假。</li>
  <li>signal’quiet(t)：若在t时间内信号不活跃(值为0)为真，否则为假。</li>
  <li>signal’transaction：信号有时间发生时翻转。</li>
  <li><strong>signal’event:若在t时间内信号发生变化为真，否则为假。</strong></li>
  <li>signal’active(t)：若在t时间内信号活跃(值为1)为真，否则为假。</li>
  <li>signal’last_event(t)：信号最后一次发生变化的时间间隔</li>
  <li>signal’last_active(t)：信号从前一次活跃(值为1)到现在所经历的时间</li>
  <li>signal’last_value(t)：信号最后一次变化前的值</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>例：
clk'event and clk ='1'; --clk上升沿
clk'event and clk ='0'; --clk下降沿
</code></pre></div></div>

<h3 id="别名">别名</h3>
<p>别名是指向一个数据对象或数据对象部分的可替换标识符，对这个标识符的操作相当于对被替换的数据对象的操作。</p>

<p>别名的声明格式：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alias 别名名称 : 别名的数据类型 is 数据对象 ;  
例：  

Variable addr : std_logic_vector(15 downto 0) ;  

alias addr_my : std_logic_vector(15 downto 0) is addr ;  
alias uaddr_my : std_logic_vector(15 downto 8) is addr ;  
alias addr_my : std_logic_vector(7 downto 0) is addr ;  
</code></pre></div></div>

<p>#数据类型
VHDL语言中每一种数据类型决定了它声明的数据对象所能进行的操作，即不同数据类型的数据对象的操作是不同的。VHDL的四中常用类型：</p>
<ul>
  <li>标量(scalar)：标量类型只有一个存储单元，有具体的数值大小，包括枚举类型、整数类型、物理类型和浮点类型。</li>
  <li>复合(composite)：复合类型的数据由数组类型(相同类型元素)和记录类型(不同类型的元素)组成</li>
  <li>存取(access)</li>
  <li>文件(file)</li>
</ul>

<h3 id="标量">标量</h3>
<h4 id="整数类型">整数类型</h4>
<p>整数类型定义了在特定整数范围内取值的类型，包括正整数、负整数和零。VHDL标准库提供了一个预定义的整形数据类型integer，其取值范围为-2147483647~2147483647(32位)。可在定义后加上范围约束来节约资源(例： in integer range 0 to 255)</p>

<p>整数类型表示：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10240317 --十进制
16#1997 --十六进制
8#17   --八进制
6#3   --六进制 
</code></pre></div></div>

<h4 id="实型物理型枚举型">实型、物理型、枚举型</h4>
<p>实型数据是数学上实数的仿真建模，分为整数值和分数值(即浮点数)。取值范围为-1.0E39~1.0E38，通常情况下VHDL综合实型数只能在VHDL仿真中使用，现在大部分综合工具不支持对实型数据的综合。其保留字为real。</p>

<p>物理型的值是物理量的度量单元(长度、质量等)，一般是不可综合的，只可用于仿真。物理型的声明是基本单元和二级单元的组合，在默认的standard程序包中预定义的物理型是时间time的数据类型。</p>

<p>枚举型定义了一中拥有用户定义数值的类型，枚举型吧属于该类型的所有元素都列出来，一大优点是直观，在元素数量不多的情况下可以有效提高VHDL程序的可读性。枚举型采用Type xxx is （XX,XX,XX）来实现。枚举类型具有大小区分的，左边的值总是小于右边的值。VHDL预定义的枚举类型有std_ulogic、character、bit、boolean、severity_level、file_open_kind和file_open_status。</p>

<p>例：1164程序包定义character指的是以下字符集：U(未初始化状态)、X(强未知)、0(强0)、1(强1)、Z(高阻)、W(弱未知)、L(弱0)、H(弱1)。</p>

<h4 id="标量类型属性">标量类型属性</h4>
<p>设t代表标量类型、x代表该类型一个值、s代表一个字符串、n代表位置号：</p>
<ul>
  <li>t’left：t类型的第一个值或最左边的值</li>
  <li>t’right：t类型的最后一个值或最右边的值</li>
  <li>t’low：t类型的最小值</li>
  <li>t’high：t类型的最大值</li>
  <li>t’ascending：如果t类型值递增则为true</li>
  <li>t’image(x)：返回x值的字符串</li>
  <li>t’value(s)：返回字符串表示的值</li>
  <li>t’pos(x)：t类型中x的位置号，0为第一个</li>
  <li>t’val(n)：t类型中x的位置号，0为第一个</li>
  <li>t’succ(x)：t类型中比x的位置号大1的位置号处的值</li>
  <li>t’pred(x)：t类型中比x的位置号小1的位置号处的值</li>
  <li>t’leftof(x)：t类型中在x的左边的值</li>
  <li>t’rightof(x)：t类型中在x的右边的值</li>
</ul>

<h3 id="数组类型">数组类型</h3>
<p>数组类型属于复合类型的一种，是将一组具有相同数据类型的元素集合在一起组成一个数据对象的数据类型。VHDL支持的数组根据索引的确定性分为约束性数组和非约束性数组。</p>

<p>约束性数组定义格式：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type 数组名 is array (数组范围) of 数据类型 ;  
例：  
type data is array (7 downto 0) of bit ;  
type data is array (0 to 7) of bit ;  
</code></pre></div></div>

<p>非约束性数组定义格式：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type 数组名 is array (下标名range &lt;&gt;) of 数据类型 ;  
例：  
type data is array (integer &lt;&gt;) of bit ; (声明时需要加上范围)  
</code></pre></div></div>

<p>数组的属性：a为数组对象存取类型变量，n代表数组标号</p>
<ul>
  <li>a’left(n)：n维数组下标范围最左边的值</li>
  <li>a’right(n)：n维数组下标范围最右边的值</li>
  <li>a’low(n)：n维数组下标范围最小的值</li>
  <li>a’high(n)：n维数组下标范围最大的值</li>
  <li>a’range(n)：n维数组下标范围</li>
  <li>a’revers_range(n)：与原来n维数组方向和边界相反的数组的范围</li>
  <li>a’length(n)：n维数组下标范围的长度</li>
  <li>a’ascending(n)h：n维数组下标范围升序则为true</li>
</ul>

<h3 id="记录类型">记录类型</h3>
<p>记录类型的元素可以包含不同的数据类型，是不同数据类型的集合。定义格式如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type 记录名 is record  
     元素名1 ： 元素的数据类型 ;  
     元素名2 ： 元素的数据类型 ;  
     元素名3 ： 元素的数据类型 ;  
end record ;  
</code></pre></div></div>

<h3 id="数据类型的转换">数据类型的转换</h3>
<p>对于VHDL的强类型设计语言，当不同数据类型进行运算时，就需要做数据类型转化。std_logic_arith程序包定义了多个数据类型转化函数。如下：</p>
<ul>
  <li>function CONV_INTEGER(ARG:INTEGER) return INTEGER ;</li>
  <li>function CONV_INTEGER(ARG:UNSIGNED) return INTEGER ;</li>
  <li>function CONV_INTEGER(ARG:SIGNED) return INTEGER ;</li>
  <li>function CONV_INTEGER(ARG:STD_ULOGIC) return INTEGER ;</li>
  <li>function CONV_UNSIGNED(ARG:INTEGER; SIZE:INTERGER) return UNSIGNED ;</li>
  <li>function CONV_UNSIGNED(ARG:UNSIGNED; SIZE:INTERGER) return UNSIGNED ;</li>
  <li>function CONV_UNSIGNED(ARG:SIGNED ; SIZE:INTERGER) return UNSIGNED ;</li>
  <li>function CONV_UNSIGNED(ARG:STD_ULOGIC) return UNSIGNED ;</li>
  <li>function CONV_SIGNED(ARG:INTEGER ; SIZE:INTERGER) return SIGNED ;</li>
  <li>function CONV_SIGNED(ARG:UNSIGNED ; SIZE:INTERGER) return SIGNED ;</li>
  <li>function CONV_SIGNED(ARG:SIGNED ; SIZE:INTERGER) return SIGNED ;</li>
  <li>function CONV_SIGNED(ARG:STD_ULOGIC ; SIZE:INTERGER) return SIGNED ;</li>
  <li>function CONV_STD_ULOGIC_VECTOR(ARG:INTEGER ; SIZE:INTERGER) return STD_ULOGIC_VECTOR ;</li>
  <li>function CONV_STD_ULOGIC_VECTOR(ARG:UNSIGNED ; SIZE:INTERGER) return STD_ULOGIC_VECTOR ;</li>
  <li>function CONV_STD_ULOGIC_VECTOR(ARG:SIGNED ; SIZE:INTERGER) return STD_ULOGIC_VECTOR ;</li>
  <li>function CONV_STD_ULOGIC_VECTOR(ARG:STD_ULOGIC ; SIZE:INTERGER) return STD_ULOGIC_VECTOR ;</li>
</ul>

<h3 id="子类型">子类型</h3>
<p>子类型是某一数据类型的一子集，有事为了提高程序可读性，一些数据对象的取值只是某一数据类型的一个子集，这时可以定义一个子类型来专门为这些数据对象进行声明。</p>

<p>子类型的声明格式：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>subtype 子类型名 is 数据类型 range &lt;约束范围&gt; ;  
</code></pre></div></div>
:ET